n  <C-H>       * :TmuxNavigateLeft<CR>
n  <NL>        * :TmuxNavigateDown<CR>
n  <C-K>       * :TmuxNavigateUp<CR>
n  <C-L>       * :TmuxNavigateRight<CR>
n  <C-N>       * :<C-U>YRReplace '1', 'p'<CR>
n  <C-P>       * :<C-U>YRReplace '-1', 'P'<CR>
n  <C-S>       * :RelatedSpecVOpen<CR>
n  <C-W>>      * 10<C-W>>
n  <C-W><      * 10<C-W><
n  <C-W>gf     * :tabe<cfile><CR>
n  <C-W>f      * :sp +e<cfile><CR>
n  <C-X>       * :cn<CR>
   <Esc>9      * 9gt
   <Esc>8      * 8gt
   <Esc>7      * 7gt
   <Esc>6      * 6gt
   <Esc>5      * 5gt
   <Esc>4      * 4gt
   <Esc>3      * 3gt
   <Esc>2      * 2gt
   <Esc>1      * 1gt
n  <C-\>       * :call OpenNerdTree()<CR>
no <C-_>9        <Plug>TComment_<C-_>9
no <C-_>8        <Plug>TComment_<C-_>8
no <C-_>7        <Plug>TComment_<C-_>7
no <C-_>6        <Plug>TComment_<C-_>6
no <C-_>5        <Plug>TComment_<C-_>5
no <C-_>4        <Plug>TComment_<C-_>4
no <C-_>3        <Plug>TComment_<C-_>3
no <C-_>2        <Plug>TComment_<C-_>2
no <C-_>1        <Plug>TComment_<C-_>1
   <C-_>ca       <Plug>TComment_<C-_>ca
   <C-_>cc       <Plug>TComment_<C-_>cc
   <C-_>s        <Plug>TComment_<C-_>s
   <C-_>n        <Plug>TComment_<C-_>n
   <C-_>a        <Plug>TComment_<C-_>a
   <C-_>b        <Plug>TComment_<C-_>b
   <C-_>i        <Plug>TComment_<C-_>i
   <C-_>r        <Plug>TComment_<C-_>r
   <C-_><Space>   <Plug>TComment_<C-_><Space>
   <C-_>p        <Plug>TComment_<C-_>p
no <C-_><C-_>    <Plug>TComment_<C-_><C-_>
n  <Space>       <Plug>SneakForward
nos#             <SNR>141_star('#')  . "\<Plug>(indexed-search-after)"
n  %           * :<C-U>call <SNR>187_Match_wrapper('',1,'n') <CR>
n  '           * `
nos*             <SNR>141_star('*')  . "\<Plug>(indexed-search-after)"
n  ,so         * :source %<CR>
n  ,ve         * :vsplit ~/.vimrc.after<CR>
n  ,tt           :set invlist<CR>
n  ,sp           :call <SNR>224_SynStack()<CR>
   ,rwp          <Plug>RestoreWinPosn
   ,swp          <Plug>SaveWinPosn
n  ,nr           <Plug>NrrwrgnDo
n  ,mc         * :call multiple_cursors#new("n")<CR>
   ,_s           <Plug>TComment_,_s
   ,_n           <Plug>TComment_,_n
   ,_a           <Plug>TComment_,_a
   ,_b           <Plug>TComment_,_b
   ,_r           <Plug>TComment_,_r
   ,_<Space>     <Plug>TComment_,_<Space>
   ,_p           <Plug>TComment_,_p
nos,__           <Plug>TComment_,__
n  ,cas        & :ChangeAroundSurrounding<CR>
n  ,ci         & :ChangeInsideSurrounding<CR>
   ,,            <Plug>(easymotion-prefix)
n  ,*            :execute 'noautocmd vimgrep /\V' . substitute(escape(expand("<cword>"), '\'), '\n', '\\n', 'g') . '/ **'<CR>
n  ,ig           <Plug>IndentGuidesToggle
   ,mm           :ShowMarksPlaceMark<CR>
   ,ma           :ShowMarksClearAll<CR>
   ,mh           :ShowMarksClearMark<CR>
   ,mo           :ShowMarksOn<CR>
   ,mt           :ShowMarksToggle<CR>
   ,hu           :call HtmlUnEscape()<CR>
   ,he           :call HtmlEscape()<CR>
n  ,<C-S>      * :RelatedSpecOpen<CR>
n  ,riv        * :RIntroduceVariable<CR>
n  ,rcpc       * :RConvertPostConditional<CR>
n  ,rel        * :RExtractLet<CR>
n  ,rit        * :RInlineTemp<CR>
n  ,rapn       * :RAddParameterNB<CR>
n  ,rap        * :RAddParameter<CR>
n  ,yr         * :YRShow<CR>
n  ,w            :StripTrailingWhitespaces<CR>
   ,hp           :!open -a Safari %<CR><CR>
   ,hi           :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">" . " FG:" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"fg#")<CR>
   ,hl         * :set hlsearch! hlsearch?<CR>
n  ,vr           :so %<CR>
n  ,vc           yy:<C-F>p<C-C><CR>
n  ,cn         * :let @* = expand("%:t")<CR>
n  ,cr         * :let @* = expand("%")<CR>
n  ,cf         * :let @* = expand("%:~")<CR>
   ,gz           <C-W>o
n  ,x          * :bn<CR>
n  ,z          * :bp<CR>
n  ,qo           :copen<CR>
n  ,qc           :cclose<CR>
n  ,.          * '.
   ,`            ysiw`
no ,{            ysiw{
no ,}            ysiw}
no ,[            ysiw[
no ,]            ysiw]
no ,)            ysiw)
no ,(            ysiw(
no ,'            ysiw'
no ,"            ysiw"
no ,#            ysiw#
n  ,ow         * "_diwhp
n  ,yw         * yiww
n  ,F          * :let word=expand("<cword>")<CR>:vsp<CR>:wincmd w<CR>:exec("tag ". word)<CR>
n  ,f          * <C-]>
n  ,gcf        * :exec "Ag " . expand("%:t:r")<CR>
n  ,gg         * :Ag ""<Left>
n  ,gd         * :Ag 'def <cword>'<CR>
n  ,K          * viwf!:<C-U>execute "Ag " . GetVisual()<CR>
n  ,k          * :Ag <cword><CR>
n  ,rxit       * :call ChangePendingRspecToXit()<CR>
n  ,cc         * :Econtroller<CR>
n  ,vv         * :Eview<CR>
n  ,qa/        * :execute "Ag! '" . substitute(substitute(substitute(@/, "\\\\<", "\\\\b", ""), "\\\\>", "\\\\b", ""), "\\\\v", "", "") . "'"<CR>
n  ,q/         * :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>
n  ,orb        * :normal varar%<Esc><Esc>
n  ,ocf        * :OpenChangedFiles<CR>
n  ,sl         * :RunItermSpringSpecLine<CR>
n  ,ss         * :RunItermSpringSpec<CR>
n  ,rl         * :RunItermSpecLine<CR>
n  ,rs         * :RunItermSpec<CR>
n  ,u            :GundoToggle<CR>
n  ,gf         * :vertical botright wincmd F<CR>
n  ,dp         * :diffput<CR>
n  ,dg         * :diffget<CR>
n  ,<S-Esc>      ,,b
n  ,<Esc>        ,,w
   ,jT           :CtrlP test<CR>
   ,jF           :CtrlP factories<CR>
   ,jV           :CtrlP vendor<CR>
   ,jC           :CtrlP config<CR>
   ,jd           :CtrlP db<CR>
   ,jf           :CtrlP fast_spec<CR>
   ,js           :CtrlP spec<CR>
   ,jp           :CtrlP public<CR>
   ,jl           :CtrlP lib<CR>
   ,jh           :CtrlP app/helpers<CR>
   ,jj           :CtrlP app/assets/javascripts<CR>
   ,jv           :CtrlP app/views<CR>
   ,jc           :CtrlP app/controllers<CR>
   ,jm           :CtrlP app/models<CR>
   ,ja           :CtrlP app/assets<CR>
n  ,b          * :CtrlPBuffer<CR>
   ,t            <Plug>(ctrlp)
n  ,af           :AgFile ""<Left>
n  ,ag           :Ag ""<Left>
n  .             YRMapsExpression("<SNR>194_", ".")
n  //            :nohlsearch<CR>
n  0           * ^
n  ;             <Plug>Sneak_;
n  <p          & :call <SNR>200_putline(']p', 'Below')<CR><']
n  <P          & :call <SNR>200_putline('[p', 'Above')<CR><']
n  =p          & :call <SNR>200_putline(']p', 'Below')<CR>=']
n  =P          & :call <SNR>200_putline('[p', 'Above')<CR>=']
n  =op         * <Nop>
n  =o            <SNR>200_legacy_option_map(nr2char(getchar()))
n  >p          & :call <SNR>200_putline(']p', 'Below')<CR>>']
n  >P          & :call <SNR>200_putline('[p', 'Above')<CR>>']
nx B             <Plug>CamelCaseMotion_b
n  C-y         * :YRShow<CR>
n  D             D<SNR>194_yrrecord
nx E             <Plug>CamelCaseMotion_e
   N             <SNR>141_n('N')     . "\<Plug>(indexed-search-after)"
n  P           * :<C-U>YRPaste 'P'<CR>
n  Q           * :call CloseWindowOrKillBuffer()<CR>
n  S             <Plug>Sneak_S
nx W             <Plug>CamelCaseMotion_w
n  X             X<SNR>194_yrrecord
n  Y           * :<C-U>YRYankCount 'y$'<CR>
n  [xx           <Plug>unimpaired_line_xml_encode
n  [x            <Plug>unimpaired_xml_encode
n  [uu           <Plug>unimpaired_line_url_encode
n  [u            <Plug>unimpaired_url_encode
n  [yy           <Plug>unimpaired_line_string_encode
n  [y            <Plug>unimpaired_string_encode
n  [P            <Plug>unimpairedPutAbove
n  [p            <Plug>unimpairedPutAbove
n  [op         & :call <SNR>200_setup_paste()<CR>O
n  [o+         & :set cursorline cursorcolumn<CR>
n  [ox         & :set cursorline cursorcolumn<CR>
n  [ov         & :set virtualedit+=all<CR>
n  [ow         & :setlocal wrap<C-R>=<SNR>200_statusbump()<CR><CR>
n  [os         & :setlocal spell<C-R>=<SNR>200_statusbump()<CR><CR>
n  [or         & :setlocal relativenumber<C-R>=<SNR>200_statusbump()<CR><CR>
n  [on         & :setlocal number<C-R>=<SNR>200_statusbump()<CR><CR>
n  [ol         & :setlocal list<C-R>=<SNR>200_statusbump()<CR><CR>
n  [oi         & :set ignorecase<C-R>=<SNR>200_statusbump()<CR><CR>
n  [oh         & :set hlsearch<C-R>=<SNR>200_statusbump()<CR><CR>
n  [od         & :diffthis<CR>
n  [o|         & :setlocal cursorcolumn<C-R>=<SNR>200_statusbump()<CR><CR>
n  [ou         & :setlocal cursorcolumn<C-R>=<SNR>200_statusbump()<CR><CR>
n  [o_         & :setlocal cursorline<C-R>=<SNR>200_statusbump()<CR><CR>
n  [o-         & :setlocal cursorline<C-R>=<SNR>200_statusbump()<CR><CR>
n  [oc         & :setlocal cursorline<C-R>=<SNR>200_statusbump()<CR><CR>
n  [ob         & :set background=light<CR>
n  [e            <Plug>unimpairedMoveUp
n  [<Space>      <Plug>unimpairedBlankUp
n  [n            <Plug>unimpairedContextPrevious
n  [f            <Plug>unimpairedDirectoryPrevious
n  [<C-T>        <Plug>unimpairedTPPrevious
n  [T            <Plug>unimpairedTFirst
n  [t            <Plug>unimpairedTPrevious
n  [<C-Q>        <Plug>unimpairedQPFile
n  [Q            <Plug>unimpairedQFirst
n  [q            <Plug>unimpairedQPrevious
n  [<C-L>        <Plug>unimpairedLPFile
n  [L            <Plug>unimpairedLFirst
n  [l            <Plug>unimpairedLPrevious
n  [B            <Plug>unimpairedBFirst
n  [b            <Plug>unimpairedBPrevious
n  [A            <Plug>unimpairedAFirst
n  [a            <Plug>unimpairedAPrevious
n  [%          * :<C-U>call <SNR>187_MultiMatch("bW", "n") <CR>
   \sm         & m
n  \sp         * ^ispecify { <Esc>$a }
n  \bf         * ^ibefore { <Esc>$a }
n  ]xx           <Plug>unimpaired_line_xml_decode
n  ]x            <Plug>unimpaired_xml_decode
n  ]uu           <Plug>unimpaired_line_url_decode
n  ]u            <Plug>unimpaired_url_decode
n  ]yy           <Plug>unimpaired_line_string_decode
n  ]y            <Plug>unimpaired_string_decode
n  ]P            <Plug>unimpairedPutBelow
n  ]p            <Plug>unimpairedPutBelow
n  ]op         & :call <SNR>200_setup_paste()<CR>o
n  ]o+         & :set nocursorline nocursorcolumn<CR>
n  ]ox         & :set nocursorline nocursorcolumn<CR>
n  ]ov         & :set virtualedit-=all<CR>
n  ]ow         & :setlocal nowrap<C-R>=<SNR>200_statusbump()<CR><CR>
n  ]os         & :setlocal nospell<C-R>=<SNR>200_statusbump()<CR><CR>
n  ]or         & :setlocal norelativenumber<C-R>=<SNR>200_statusbump()<CR><CR>
n  ]on         & :setlocal nonumber<C-R>=<SNR>200_statusbump()<CR><CR>
n  ]ol         & :setlocal nolist<C-R>=<SNR>200_statusbump()<CR><CR>
n  ]oi         & :set noignorecase<C-R>=<SNR>200_statusbump()<CR><CR>
n  ]oh         & :set nohlsearch<C-R>=<SNR>200_statusbump()<CR><CR>
n  ]od         & :diffoff<CR>
n  ]o|         & :setlocal nocursorcolumn<C-R>=<SNR>200_statusbump()<CR><CR>
n  ]ou         & :setlocal nocursorcolumn<C-R>=<SNR>200_statusbump()<CR><CR>
n  ]o_         & :setlocal nocursorline<C-R>=<SNR>200_statusbump()<CR><CR>
n  ]o-         & :setlocal nocursorline<C-R>=<SNR>200_statusbump()<CR><CR>
n  ]oc         & :setlocal nocursorline<C-R>=<SNR>200_statusbump()<CR><CR>
n  ]ob         & :set background=dark<CR>
n  ]e            <Plug>unimpairedMoveDown
n  ]<Space>      <Plug>unimpairedBlankDown
n  ]n            <Plug>unimpairedContextNext
n  ]f            <Plug>unimpairedDirectoryNext
n  ]<C-T>        <Plug>unimpairedTPNext
n  ]T            <Plug>unimpairedTLast
n  ]t            <Plug>unimpairedTNext
n  ]<C-Q>        <Plug>unimpairedQNFile
n  ]Q            <Plug>unimpairedQLast
n  ]q            <Plug>unimpairedQNext
n  ]<C-L>        <Plug>unimpairedLNFile
n  ]L            <Plug>unimpairedLLast
n  ]l            <Plug>unimpairedLNext
n  ]B            <Plug>unimpairedBLast
n  ]b            <Plug>unimpairedBNext
n  ]A            <Plug>unimpairedALast
n  ]a            <Plug>unimpairedANext
n  ]%          * :<C-U>call <SNR>187_MultiMatch("W",  "n") <CR>
n  ^           * 0
n  `           * '
n  cop         * <Nop>
n  co            <SNR>200_legacy_option_map(nr2char(getchar()))
n  cS            <Plug>CSurround
n  cs            <Plug>Csurround
n  cr            <Plug>Coerce
n  ds            <Plug>Dsurround
n  gx            <Plug>NetrwBrowseX
n  gp          * :<C-U>YRPaste 'gp'<CR>
n  gP          * :<C-U>YRPaste 'gP'<CR>
n  gK          * :call investigate#Investigate('n')<CR>
n  g%          * :<C-U>call <SNR>187_Match_wrapper('',0,'n') <CR>
n  g>b           <Plug>TComment_Commentb
n  g>c           <Plug>TComment_Commentc
n  g>            <Plug>TComment_Comment
n  g<b           <Plug>TComment_Uncommentb
n  g<c           <Plug>TComment_Uncommentc
n  g<            <Plug>TComment_Uncomment
n  gcb           <Plug>TComment_gcb
n  gcc           <Plug>TComment_gcc
n  gc9c          <Plug>TComment_gc9c
n  gc9           <Plug>TComment_gc9
n  gc8c          <Plug>TComment_gc8c
n  gc8           <Plug>TComment_gc8
n  gc7c          <Plug>TComment_gc7c
n  gc7           <Plug>TComment_gc7
n  gc6c          <Plug>TComment_gc6c
n  gc6           <Plug>TComment_gc6
n  gc5c          <Plug>TComment_gc5c
n  gc5           <Plug>TComment_gc5
n  gc4c          <Plug>TComment_gc4c
n  gc4           <Plug>TComment_gc4
n  gc3c          <Plug>TComment_gc3c
n  gc3           <Plug>TComment_gc3
n  gc2c          <Plug>TComment_gc2c
n  gc2           <Plug>TComment_gc2
n  gc1c          <Plug>TComment_gc1c
n  gc1           <Plug>TComment_gc1
n  gc            <Plug>TComment_gc
n  gS          * :<C-U>call <SNR>173_Mapping(g:splitjoin_split_mapping, "<SNR>173_Split")<CR>
n  gJ          * :<C-U>call <SNR>173_Mapping(g:splitjoin_join_mapping, "<SNR>173_Join")<CR>
   g#            <SNR>141_star('g#') . "\<Plug>(indexed-search-after)"
   g*            <SNR>141_star('g*') . "\<Plug>(indexed-search-after)"
n  gcp           <C-_>p
   m           * :exe 'norm \sm'.nr2char(getchar())|call <SNR>125_ShowMarks()<CR>
   n             <SNR>141_n('n')     . "\<Plug>(indexed-search-after)"
n  p           * :<C-U>YRPaste 'p'<CR>
n  sk            :SplitjoinJoin<CR>
n  sj            :SplitjoinSplit<CR>
n  ss          * <C-W>s
n  vv          * <C-W>v
n  x             x<SNR>194_yrrecord
n  yop         & :call <SNR>200_setup_paste()<CR>0C
n  yo+         & :set <C-R>=<SNR>200_cursor_options()<CR><CR>
n  yox         & :set <C-R>=<SNR>200_cursor_options()<CR><CR>
n  yov         & :set <C-R>=(&virtualedit =~# "all") ? "virtualedit-=all" : "virtualedit+=all"<CR><CR>
n  yow         & :setlocal <C-R>=<SNR>200_toggle("wrap")<CR><CR>
n  yos         & :setlocal <C-R>=<SNR>200_toggle("spell")<CR><CR>
n  yor         & :setlocal <C-R>=<SNR>200_toggle("relativenumber")<CR><CR>
n  yon         & :setlocal <C-R>=<SNR>200_toggle("number")<CR><CR>
n  yol         & :setlocal <C-R>=<SNR>200_toggle("list")<CR><CR>
n  yoi         & :set <C-R>=<SNR>200_toggle("ignorecase")<CR><CR>
n  yoh         & :set <C-R>=<SNR>200_toggle("hlsearch")<CR><CR>
n  yod         & :<C-R>=&diff ? "diffoff" : "diffthis"<CR><CR>
n  yo|         & :setlocal <C-R>=<SNR>200_toggle("cursorcolumn")<CR><CR>
n  you         & :setlocal <C-R>=<SNR>200_toggle("cursorcolumn")<CR><CR>
n  yo_         & :setlocal <C-R>=<SNR>200_toggle("cursorline")<CR><CR>
n  yo-         & :setlocal <C-R>=<SNR>200_toggle("cursorline")<CR><CR>
n  yoc         & :setlocal <C-R>=<SNR>200_toggle("cursorline")<CR><CR>
n  yob         & :set background=<C-R>=&background == "dark" ? "light" : "dark"<CR><CR>
n  ySS           <Plug>YSsurround
n  ySs           <Plug>YSsurround
n  yss           <Plug>Yssurround
n  yS            <Plug>YSurround
n  ys            <Plug>Ysurround
n  zs          * :RunItermZeusSpec<CR>
n  zl          * :RunItermZeusSpecLine<CR>
n  <Down>      * <Nop>
n  <Up>        * <Nop>
n  <Right>     * <Nop>
n  <Left>      * <Nop>
n  <Plug>NetrwBrowseX * :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())<CR>
n  <Plug>GitGutterPreviewHunk * :GitGutterPreviewHunk<CR>
n  <Plug>GitGutterUndoHunk * :GitGutterUndoHunk<CR>
n  <Plug>GitGutterStageHunk * :GitGutterStageHunk<CR>
n  <Plug>GitGutterPrevHunk * &diff ? '[c' : ":\<C-U>execute v:count1 . 'GitGutterPrevHunk'\<CR>"
n  <Plug>GitGutterNextHunk * &diff ? ']c' : ":\<C-U>execute v:count1 . 'GitGutterNextHunk'\<CR>"
n  <Plug>RestoreWinPosn   :call RestoreWinPosn()<CR>
n  <Plug>SaveWinPosn   :call SaveWinPosn()<CR>
n  <Plug>unimpaired_line_xml_decode * <SNR>200_TransformSetup("xml_decode")."_"
n  <Plug>unimpaired_xml_decode * <SNR>200_TransformSetup("xml_decode")
n  <Plug>unimpaired_line_xml_encode * <SNR>200_TransformSetup("xml_encode")."_"
n  <Plug>unimpaired_xml_encode * <SNR>200_TransformSetup("xml_encode")
n  <Plug>unimpaired_line_url_decode * <SNR>200_TransformSetup("url_decode")."_"
n  <Plug>unimpaired_url_decode * <SNR>200_TransformSetup("url_decode")
n  <Plug>unimpaired_line_url_encode * <SNR>200_TransformSetup("url_encode")."_"
n  <Plug>unimpaired_url_encode * <SNR>200_TransformSetup("url_encode")
n  <Plug>unimpaired_line_string_decode * <SNR>200_TransformSetup("string_decode")."_"
n  <Plug>unimpaired_string_decode * <SNR>200_TransformSetup("string_decode")
n  <Plug>unimpaired_line_string_encode * <SNR>200_TransformSetup("string_encode")."_"
n  <Plug>unimpaired_string_encode * <SNR>200_TransformSetup("string_encode")
n  <Plug>unimpairedPutBelow * :call <SNR>200_putline(']p', 'Below')<CR>
n  <Plug>unimpairedPutAbove * :call <SNR>200_putline('[p', 'Above')<CR>
n  <Plug>unimpairedPaste * :call <SNR>200_setup_paste()<CR>
   <Plug>unimpairedMoveSelectionDown * :<C-U>call <SNR>200_MoveSelectionDown(v:count1)<CR>
   <Plug>unimpairedMoveSelectionUp * :<C-U>call <SNR>200_MoveSelectionUp(v:count1)<CR>
n  <Plug>unimpairedMoveDown * :<C-U>call <SNR>200_Move('+',v:count1,'Down')<CR>
n  <Plug>unimpairedMoveUp * :<C-U>call <SNR>200_Move('--',v:count1,'Up')<CR>
n  <Plug>unimpairedBlankDown * :<C-U>call <SNR>200_BlankDown(v:count1)<CR>
n  <Plug>unimpairedBlankUp * :<C-U>call <SNR>200_BlankUp(v:count1)<CR>
n  <Plug>unimpairedContextNext * :call <SNR>200_Context(0)<CR>
n  <Plug>unimpairedContextPrevious * :call <SNR>200_Context(1)<CR>
n  <Plug>unimpairedDirectoryPrevious * :<C-U>edit <C-R>=<SNR>200_fnameescape(fnamemodify(<SNR>200_FileByOffset(-v:count1), ':.'))<CR><CR>
n  <Plug>unimpairedDirectoryNext * :<C-U>edit <C-R>=<SNR>200_fnameescape(fnamemodify(<SNR>200_FileByOffset(v:count1), ':.'))<CR><CR>
n  <Plug>unimpairedTPNext * :<C-U>exe "p".(v:count ? v:count : "")."tnext"<CR>
n  <Plug>unimpairedTPPrevious * :<C-U>exe "p".(v:count ? v:count : "")."tprevious"<CR>
n  <Plug>unimpairedTLast * :<C-U>exe "".(v:count ? v:count : "")."tlast"<CR>
n  <Plug>unimpairedTFirst * :<C-U>exe "".(v:count ? v:count : "")."tfirst"<CR>
n  <Plug>unimpairedTNext * :<C-U>exe "".(v:count ? v:count : "")."tnext"<CR>
n  <Plug>unimpairedTPrevious * :<C-U>exe "".(v:count ? v:count : "")."tprevious"<CR>
n  <Plug>unimpairedQNFile * :<C-U>exe "".(v:count ? v:count : "")."cnfile"<CR>zv
n  <Plug>unimpairedQPFile * :<C-U>exe "".(v:count ? v:count : "")."cpfile"<CR>zv
n  <Plug>unimpairedQLast * :<C-U>exe "".(v:count ? v:count : "")."clast"<CR>zv
n  <Plug>unimpairedQFirst * :<C-U>exe "".(v:count ? v:count : "")."cfirst"<CR>zv
n  <Plug>unimpairedQNext * :<C-U>exe "".(v:count ? v:count : "")."cnext"<CR>zv
n  <Plug>unimpairedQPrevious * :<C-U>exe "".(v:count ? v:count : "")."cprevious"<CR>zv
n  <Plug>unimpairedLNFile * :<C-U>exe "".(v:count ? v:count : "")."lnfile"<CR>zv
n  <Plug>unimpairedLPFile * :<C-U>exe "".(v:count ? v:count : "")."lpfile"<CR>zv
n  <Plug>unimpairedLLast * :<C-U>exe "".(v:count ? v:count : "")."llast"<CR>zv
n  <Plug>unimpairedLFirst * :<C-U>exe "".(v:count ? v:count : "")."lfirst"<CR>zv
n  <Plug>unimpairedLNext * :<C-U>exe "".(v:count ? v:count : "")."lnext"<CR>zv
n  <Plug>unimpairedLPrevious * :<C-U>exe "".(v:count ? v:count : "")."lprevious"<CR>zv
n  <Plug>unimpairedBLast * :<C-U>exe "".(v:count ? v:count : "")."blast"<CR>
n  <Plug>unimpairedBFirst * :<C-U>exe "".(v:count ? v:count : "")."bfirst"<CR>
n  <Plug>unimpairedBNext * :<C-U>exe "".(v:count ? v:count : "")."bnext"<CR>
n  <Plug>unimpairedBPrevious * :<C-U>exe "".(v:count ? v:count : "")."bprevious"<CR>
n  <Plug>unimpairedALast * :<C-U>exe "".(v:count ? v:count : "")."last"<CR>
n  <Plug>unimpairedAFirst * :<C-U>exe "".(v:count ? v:count : "")."first"<CR>
n  <Plug>unimpairedANext * :<C-U>exe "".(v:count ? v:count : "")."next"<CR>
n  <Plug>unimpairedAPrevious * :<C-U>exe "".(v:count ? v:count : "")."previous"<CR>
n  <Plug>YSurround * <SNR>199_opfunc2('setup')
n  <Plug>Ysurround * <SNR>199_opfunc('setup')
n  <Plug>YSsurround * <SNR>199_opfunc2('setup').'_'
n  <Plug>Yssurround * '^'.v:count1.<SNR>199_opfunc('setup').'g_'
n  <Plug>CSurround * :<C-U>call <SNR>199_changesurround(1)<CR>
n  <Plug>Csurround * :<C-U>call <SNR>199_changesurround()<CR>
n  <Plug>Dsurround * :<C-U>call <SNR>199_dosurround(<SNR>199_inputtarget())<CR>
n  <Plug>SurroundRepeat * .
n  <Plug>Coerce * :<C-U>call <SNR>196_coerce(nr2char(getchar()))<CR>
n  <SNR>194_yrrecord * :call YRRecord3()<CR>
n  <SNR>190_VisualNrrwRgn * :set opfunc=<SNR>190_NrrwRgnOp<CR>g@
n  <Plug>NrrwrgnDo & <SNR>190_VisualNrrwRgn
n  <Plug>CamelCaseMotion_e * :<C-U>call camelcasemotion#Motion('e',v:count1,'n')<CR>
n  <Plug>CamelCaseMotion_b * :<C-U>call camelcasemotion#Motion('b',v:count1,'n')<CR>
n  <Plug>CamelCaseMotion_w * :<C-U>call camelcasemotion#Motion('w',v:count1,'n')<CR>
n  <Plug>TComment_gc9c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc9c<CR>g@
n  <Plug>TComment_gc8c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc8c<CR>g@
n  <Plug>TComment_gc7c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc7c<CR>g@
n  <Plug>TComment_gc6c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc6c<CR>g@
n  <Plug>TComment_gc5c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc5c<CR>g@
n  <Plug>TComment_gc4c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc4c<CR>g@
n  <Plug>TComment_gc3c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc3c<CR>g@
n  <Plug>TComment_gc2c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc2c<CR>g@
n  <Plug>TComment_gc1c * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc1c<CR>g@
no <Plug>TComment_<C-_>9 * :call tcomment#SetOption("count", 9)<CR>
no <Plug>TComment_<C-_>8 * :call tcomment#SetOption("count", 8)<CR>
no <Plug>TComment_<C-_>7 * :call tcomment#SetOption("count", 7)<CR>
no <Plug>TComment_<C-_>6 * :call tcomment#SetOption("count", 6)<CR>
no <Plug>TComment_<C-_>5 * :call tcomment#SetOption("count", 5)<CR>
no <Plug>TComment_<C-_>4 * :call tcomment#SetOption("count", 4)<CR>
no <Plug>TComment_<C-_>3 * :call tcomment#SetOption("count", 3)<CR>
no <Plug>TComment_<C-_>2 * :call tcomment#SetOption("count", 2)<CR>
no <Plug>TComment_<C-_>1 * :call tcomment#SetOption("count", 1)<CR>
n  <Plug>TComment_gC * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gC<CR>g@
n  <Plug>TComment_gc * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gc<CR>g@
n  <Plug>TComment_gcb * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gcb<CR>g@
n  <Plug>TComment_gcc * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_gcc<CR>g@$
   <Plug>TComment_ic * :<C-U>call tcomment#textobject#InlineComment()<CR>
n  <Plug>TComment_Commentb * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Commentb<CR>g@
n  <Plug>TComment_Commentc * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Commentc<CR>g@$
n  <Plug>TComment_Commentl * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Commentl<CR>g@$
n  <Plug>TComment_Comment * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Comment<CR>g@
n  <Plug>TComment_Uncommentb * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Uncommentb<CR>g@
n  <Plug>TComment_Uncommentc * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Uncommentc<CR>g@$
n  <Plug>TComment_Uncomment * :<C-U>call tcomment#ResetOption() | if v:count > 0 | call tcomment#SetOption("count", v:count) | endif | let w:tcommentPos = getpos(".") |set opfunc=TCommentOpFunc_Uncomment<CR>g@
   <Plug>TComment_,_s * :TCommentAs <C-R>=&ft<CR>_
   <Plug>TComment_,_n * :TCommentAs <C-R>=&ft<CR><Space>
   <Plug>TComment_,_a * :TCommentAs<Space>
   <Plug>TComment_,_b * :TCommentBlock<CR>
   <Plug>TComment_,_r * :TCommentRight<CR>
   <Plug>TComment_,_<Space> * :TComment<Space>
   <Plug>TComment_,_p * vip:TComment<CR>
nos<Plug>TComment_,__ * :TComment<CR>
   <Plug>TComment_<C-_>ca * :<C-U>call tcomment#SetOption("as", input("Comment as: ", &filetype, "customlist,tcomment#complete#Complete"))<CR>
   <Plug>TComment_<C-_>cc * :<C-U>call tcomment#SetOption("count", v:count1)<CR>
   <Plug>TComment_<C-_>s * :TCommentAs <C-R>=&ft<CR>_
   <Plug>TComment_<C-_>n * :TCommentAs <C-R>=&ft<CR><Space>
   <Plug>TComment_<C-_>a * :TCommentAs<Space>
   <Plug>TComment_<C-_>b * :TCommentBlock<CR>
   <Plug>TComment_<C-_>i * v:TCommentInline mode=I#<CR>
   <Plug>TComment_<C-_>r * :TCommentRight<CR>
   <Plug>TComment_<C-_><Space> * :TComment<Space>
   <Plug>TComment_<C-_>p * m`vip:TComment<CR>``
no <Plug>TComment_<C-_><C-_> * :TComment<CR>
n  <Plug>SplitjoinJoin * :<C-U>call <SNR>173_Join()<CR>
n  <Plug>SplitjoinSplit * :<C-U>call <SNR>173_Split()<CR>
n  <Plug>(ctrlp) * :<C-U>CtrlP<CR>
   <Plug>NERDTreeFocusToggle & :call <SNR>162_NERDTreeFocusToggle()
   <Plug>NERDTreeSteppedClose & :call <SNR>162_NERDTreeSteppedClose()
   <Plug>NERDTreeSteppedOpen & :call <SNR>162_NERDTreeSteppedOpen()
   <Plug>NERDTreeMirrorToggle & :call <SNR>162_NERDTreeMirrorToggle()
   <Plug>NERDTreeMirrorOpen & :call <SNR>162_NERDTreeMirrorOrCreate()
   <Plug>NERDTreeTabsFind & :call <SNR>162_NERDTreeFindFile()
   <Plug>NERDTreeTabsToggle & :call <SNR>162_NERDTreeToggleAllTabs()
   <Plug>NERDTreeTabsClose & :call <SNR>162_NERDTreeCloseAllTabs()
   <Plug>NERDTreeTabsOpen & :call <SNR>162_NERDTreeOpenAllTabs()
   <Plug>(easymotion-prefix)N   <Plug>(easymotion-N)
   <Plug>(easymotion-prefix)n   <Plug>(easymotion-n)
   <Plug>(easymotion-prefix)k   <Plug>(easymotion-k)
   <Plug>(easymotion-prefix)j   <Plug>(easymotion-j)
   <Plug>(easymotion-prefix)gE   <Plug>(easymotion-gE)
   <Plug>(easymotion-prefix)ge   <Plug>(easymotion-ge)
   <Plug>(easymotion-prefix)E   <Plug>(easymotion-E)
   <Plug>(easymotion-prefix)e   <Plug>(easymotion-e)
   <Plug>(easymotion-prefix)B   <Plug>(easymotion-B)
   <Plug>(easymotion-prefix)b   <Plug>(easymotion-b)
   <Plug>(easymotion-prefix)W   <Plug>(easymotion-W)
   <Plug>(easymotion-prefix)w   <Plug>(easymotion-w)
   <Plug>(easymotion-prefix)T   <Plug>(easymotion-T)
   <Plug>(easymotion-prefix)t   <Plug>(easymotion-t)
   <Plug>(easymotion-prefix)s   <Plug>(easymotion-s)
   <Plug>(easymotion-prefix)F   <Plug>(easymotion-F)
   <Plug>(easymotion-prefix)f   <Plug>(easymotion-f)
nos<Plug>(easymotion-activate) * :<C-U>call EasyMotion#activate(0)<CR>
   <Plug>(easymotion-dotrepeat) * :<C-U>call EasyMotion#DotRepeat()<CR>
nos<Plug>(easymotion-repeat) * :<C-U>call EasyMotion#Repeat(0)<CR>
nos<Plug>(easymotion-prev) * :<C-U>call EasyMotion#NextPrevious(0,1)<CR>
nos<Plug>(easymotion-next) * :<C-U>call EasyMotion#NextPrevious(0,0)<CR>
nos<Plug>(easymotion-wl) * :<C-U>call EasyMotion#WBL(0,0)<CR>
nos<Plug>(easymotion-lineforward) * :<C-U>call EasyMotion#LineAnywhere(0,0)<CR>
nos<Plug>(easymotion-lineanywhere) * :<C-U>call EasyMotion#LineAnywhere(0,2)<CR>
nos<Plug>(easymotion-bd-wl) * :<C-U>call EasyMotion#WBL(0,2)<CR>
nos<Plug>(easymotion-linebackward) * :<C-U>call EasyMotion#LineAnywhere(0,1)<CR>
nos<Plug>(easymotion-bl) * :<C-U>call EasyMotion#WBL(0,1)<CR>
nos<Plug>(easymotion-el) * :<C-U>call EasyMotion#EL(0,0)<CR>
nos<Plug>(easymotion-gel) * :<C-U>call EasyMotion#EL(0,1)<CR>
nos<Plug>(easymotion-bd-el) * :<C-U>call EasyMotion#EL(0,2)<CR>
nos<Plug>(easymotion-jumptoanywhere) * :<C-U>call EasyMotion#JumpToAnywhere(0,2)<CR>
nos<Plug>(easymotion-vim-n) * :<C-U>call EasyMotion#Search(0,0,1)<CR>
nos<Plug>(easymotion-n) * :<C-U>call EasyMotion#Search(0,0,0)<CR>
nos<Plug>(easymotion-bd-n) * :<C-U>call EasyMotion#Search(0,2,0)<CR>
nos<Plug>(easymotion-vim-N) * :<C-U>call EasyMotion#Search(0,1,1)<CR>
nos<Plug>(easymotion-N) * :<C-U>call EasyMotion#Search(0,1,0)<CR>
nos<Plug>(easymotion-eol-j) * :<C-U>call EasyMotion#Eol(0,0)<CR>
nos<Plug>(easymotion-sol-k) * :<C-U>call EasyMotion#Sol(0,1)<CR>
nos<Plug>(easymotion-sol-j) * :<C-U>call EasyMotion#Sol(0,0)<CR>
nos<Plug>(easymotion-k) * :<C-U>call EasyMotion#JK(0,1)<CR>
nos<Plug>(easymotion-j) * :<C-U>call EasyMotion#JK(0,0)<CR>
nos<Plug>(easymotion-bd-jk) * :<C-U>call EasyMotion#JK(0,2)<CR>
nos<Plug>(easymotion-eol-bd-jk) * :<C-U>call EasyMotion#Eol(0,2)<CR>
nos<Plug>(easymotion-sol-bd-jk) * :<C-U>call EasyMotion#Sol(0,2)<CR>
nos<Plug>(easymotion-eol-k) * :<C-U>call EasyMotion#Eol(0,1)<CR>
nos<Plug>(easymotion-iskeyword-ge) * :<C-U>call EasyMotion#EK(0,1)<CR>
nos<Plug>(easymotion-w) * :<C-U>call EasyMotion#WB(0,0)<CR>
nos<Plug>(easymotion-bd-W) * :<C-U>call EasyMotion#WBW(0,2)<CR>
nos<Plug>(easymotion-iskeyword-w) * :<C-U>call EasyMotion#WBK(0,0)<CR>
nos<Plug>(easymotion-gE) * :<C-U>call EasyMotion#EW(0,1)<CR>
nos<Plug>(easymotion-e) * :<C-U>call EasyMotion#E(0,0)<CR>
nos<Plug>(easymotion-bd-E) * :<C-U>call EasyMotion#EW(0,2)<CR>
nos<Plug>(easymotion-iskeyword-e) * :<C-U>call EasyMotion#EK(0,0)<CR>
nos<Plug>(easymotion-b) * :<C-U>call EasyMotion#WB(0,1)<CR>
nos<Plug>(easymotion-iskeyword-b) * :<C-U>call EasyMotion#WBK(0,1)<CR>
nos<Plug>(easymotion-iskeyword-bd-w) * :<C-U>call EasyMotion#WBK(0,2)<CR>
nos<Plug>(easymotion-W) * :<C-U>call EasyMotion#WBW(0,0)<CR>
nos<Plug>(easymotion-bd-w) * :<C-U>call EasyMotion#WB(0,2)<CR>
nos<Plug>(easymotion-iskeyword-bd-e) * :<C-U>call EasyMotion#EK(0,2)<CR>
nos<Plug>(easymotion-ge) * :<C-U>call EasyMotion#E(0,1)<CR>
nos<Plug>(easymotion-E) * :<C-U>call EasyMotion#EW(0,0)<CR>
nos<Plug>(easymotion-bd-e) * :<C-U>call EasyMotion#E(0,2)<CR>
nos<Plug>(easymotion-B) * :<C-U>call EasyMotion#WBW(0,1)<CR>
n  <Plug>(easymotion-overwin-w) * :<C-U>call EasyMotion#overwin#w()<CR>
n  <Plug>(easymotion-overwin-line) * :<C-U>call EasyMotion#overwin#line()<CR>
n  <Plug>(easymotion-overwin-f2) * :<C-U>call EasyMotion#OverwinF(2)<CR>
n  <Plug>(easymotion-overwin-f) * :<C-U>call EasyMotion#OverwinF(1)<CR>
nos<Plug>(easymotion-Tln) * :<C-U>call EasyMotion#TL(-1,0,1)<CR>
nos<Plug>(easymotion-t2) * :<C-U>call EasyMotion#T(2,0,0)<CR>
nos<Plug>(easymotion-t) * :<C-U>call EasyMotion#T(1,0,0)<CR>
nos<Plug>(easymotion-s) * :<C-U>call EasyMotion#S(1,0,2)<CR>
nos<Plug>(easymotion-tn) * :<C-U>call EasyMotion#T(-1,0,0)<CR>
nos<Plug>(easymotion-bd-t2) * :<C-U>call EasyMotion#T(2,0,2)<CR>
nos<Plug>(easymotion-tl) * :<C-U>call EasyMotion#TL(1,0,0)<CR>
nos<Plug>(easymotion-bd-tn) * :<C-U>call EasyMotion#T(-1,0,2)<CR>
nos<Plug>(easymotion-fn) * :<C-U>call EasyMotion#S(-1,0,0)<CR>
nos<Plug>(easymotion-bd-tl) * :<C-U>call EasyMotion#TL(1,0,2)<CR>
nos<Plug>(easymotion-fl) * :<C-U>call EasyMotion#SL(1,0,0)<CR>
nos<Plug>(easymotion-bd-tl2) * :<C-U>call EasyMotion#TL(2,0,2)<CR>
nos<Plug>(easymotion-bd-fn) * :<C-U>call EasyMotion#S(-1,0,2)<CR>
nos<Plug>(easymotion-f) * :<C-U>call EasyMotion#S(1,0,0)<CR>
nos<Plug>(easymotion-bd-fl) * :<C-U>call EasyMotion#SL(1,0,2)<CR>
nos<Plug>(easymotion-Fl2) * :<C-U>call EasyMotion#SL(2,0,1)<CR>
nos<Plug>(easymotion-tl2) * :<C-U>call EasyMotion#TL(2,0,0)<CR>
nos<Plug>(easymotion-f2) * :<C-U>call EasyMotion#S(2,0,0)<CR>
nos<Plug>(easymotion-Fln) * :<C-U>call EasyMotion#SL(-1,0,1)<CR>
nos<Plug>(easymotion-sln) * :<C-U>call EasyMotion#SL(-1,0,2)<CR>
nos<Plug>(easymotion-tln) * :<C-U>call EasyMotion#TL(-1,0,0)<CR>
nos<Plug>(easymotion-fl2) * :<C-U>call EasyMotion#SL(2,0,0)<CR>
nos<Plug>(easymotion-bd-fl2) * :<C-U>call EasyMotion#SL(2,0,2)<CR>
nos<Plug>(easymotion-T2) * :<C-U>call EasyMotion#T(2,0,1)<CR>
nos<Plug>(easymotion-bd-tln) * :<C-U>call EasyMotion#TL(-1,0,2)<CR>
nos<Plug>(easymotion-T) * :<C-U>call EasyMotion#T(1,0,1)<CR>
nos<Plug>(easymotion-bd-t) * :<C-U>call EasyMotion#T(1,0,2)<CR>
nos<Plug>(easymotion-Tn) * :<C-U>call EasyMotion#T(-1,0,1)<CR>
nos<Plug>(easymotion-s2) * :<C-U>call EasyMotion#S(2,0,2)<CR>
nos<Plug>(easymotion-Tl) * :<C-U>call EasyMotion#TL(1,0,1)<CR>
nos<Plug>(easymotion-sn) * :<C-U>call EasyMotion#S(-1,0,2)<CR>
nos<Plug>(easymotion-Fn) * :<C-U>call EasyMotion#S(-1,0,1)<CR>
nos<Plug>(easymotion-sl) * :<C-U>call EasyMotion#SL(1,0,2)<CR>
nos<Plug>(easymotion-Fl) * :<C-U>call EasyMotion#SL(1,0,1)<CR>
nos<Plug>(easymotion-sl2) * :<C-U>call EasyMotion#SL(2,0,2)<CR>
nos<Plug>(easymotion-bd-fln) * :<C-U>call EasyMotion#SL(-1,0,2)<CR>
nos<Plug>(easymotion-F) * :<C-U>call EasyMotion#S(1,0,1)<CR>
nos<Plug>(easymotion-bd-f) * :<C-U>call EasyMotion#S(1,0,2)<CR>
nos<Plug>(easymotion-F2) * :<C-U>call EasyMotion#S(2,0,1)<CR>
nos<Plug>(easymotion-bd-f2) * :<C-U>call EasyMotion#S(2,0,2)<CR>
nos<Plug>(easymotion-Tl2) * :<C-U>call EasyMotion#TL(2,0,1)<CR>
nos<Plug>(easymotion-fln) * :<C-U>call EasyMotion#SL(-1,0,0)<CR>
   <Plug>(indexed-search-after)   <SNR>141_after()
   <Plug>(indexed-search-restview) * :call <SNR>141_restview()<CR>
   <Plug>(indexed-search-N) * N
   <Plug>(indexed-search-n) * n
n  <Plug>(indexed-search-index) * :ShowSearchIndex<CR>
n  <Plug>SneakPrevious   <Plug>Sneak_,
n  <Plug>SneakNext   <Plug>Sneak_;
n  <Plug>(SneakStreakBackward)   <Plug>SneakLabel_S
n  <Plug>(SneakStreak)   <Plug>SneakLabel_s
n  <Plug>SneakBackward   <Plug>Sneak_S
n  <Plug>SneakForward   <Plug>Sneak_s
n  <Plug>SneakLabel_S * :<C-U>call sneak#wrap('', 2, 1, 2, 2)<CR>
n  <Plug>SneakLabel_s * :<C-U>call sneak#wrap('', 2, 0, 2, 2)<CR>
n  <Plug>Sneak_T * :<C-U>call sneak#wrap('', 1, 1, 0, 0)<CR>
n  <Plug>Sneak_t * :<C-U>call sneak#wrap('', 1, 0, 0, 0)<CR>
n  <Plug>Sneak_F * :<C-U>call sneak#wrap('', 1, 1, 1, 0)<CR>
n  <Plug>Sneak_f * :<C-U>call sneak#wrap('', 1, 0, 1, 0)<CR>
n  <Plug>Sneak_, * :<C-U>call sneak#rpt('', 1)<CR>
n  <Plug>Sneak_; * :<C-U>call sneak#rpt('', 0)<CR>
n  <Plug>Sneak_S * :<C-U>call sneak#wrap('', 2, 1, 2, 1)<CR>
n  <Plug>Sneak_s * :<C-U>call sneak#wrap('', 2, 0, 2, 1)<CR>
n  <Plug>IndentGuidesDisable & :IndentGuidesDisable<CR>
n  <Plug>IndentGuidesEnable & :IndentGuidesEnable<CR>
n  <Plug>IndentGuidesToggle & :IndentGuidesToggle<CR>
n  <SNR>129_   * <SNR>129_
n  <Plug>ColorFgBg * :<C-U>ColorSwapFgBg<CR>
n  <Plug>ColorContrast * :<C-U>ColorContrast<CR>
n  <Plug>Colorizer * :<C-U>ColorToggle<CR>
n  <D-0>         g^
n  <D-^>         g^
n  <D-$>         g$
   <D-%>         :so %<CR>
n  <D-A>         :Tabularize /
n  <D-Right>   * <C-W>>
n  <D-Left>    * <C-W><
n  <D-Down>    * <C-W>-
n  <D-Up>      * <C-W>+
   <D-9>         :tabn 9<CR>
   <D-8>         :tabn 8<CR>
   <D-7>         :tabn 7<CR>
   <D-6>         :tabn 6<CR>
   <D-5>         :tabn 5<CR>
   <D-4>         :tabn 4<CR>
   <D-3>         :tabn 3<CR>
   <D-2>         :tabn 2<CR>
   <D-1>         :tabn 1<CR>
   <D-/>         :TComment<CR>
n  <D-k>         gk
n  <D-j>         gj
n  <D-N>         :NERDTreeToggle<CR>
n  <D-]>       * f]ci]
n  <D-[>       * f[ci[
n  <D-)>       * f)ci)
n  <D-(>       * f(ci(
n  <D-">       * f"ci"
n  <D-'>       * f'ci'
n  <C-Down>      ]e
n  <C-Up>        [e
n  <D-M>       * :CtrlPBufTag<CR>
n  <D-P>       * :ClearCtrlPCache<CR>

